#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'git'
}

# shellcheck disable=SC2034
_global_variables() {
  publishing_date=()
  local_packages=()
  repo_dir=""
  repo_origin=""
  pub_plat=""
  pub_dir=""
  output_dir=""
  color=""
  quiet=""
}

_get_platform() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    echo \
      "termux"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    echo \
      "arch"
  fi
}

_aspe() {
  local \
    _pkgname="${1}" \
    _source="${2}"
  aspe \
    -p \
    "${_source}" \
    "${_pkgname}"
}

_makepkg() {
  local \
    _pkgname="${1}" \
    _source="${2}" \
    _user="${3}"
  local \
    _key \
    _awk_pgpkeys_cmd='/validpgpkeys=/{flag=1;next}/\)/{flag=0}flag' \
    _validpgpkeys
  _aspe \
    "${_pkgname}"
    "${_source}"
  cd \
    "${_pkgname}" || \
    exit
  source \
    'PKGBUILD'
  gpg \
    --recv-keys \
    "${validpgpkeys[@]}"
  reallymakepkg
  mv \
    "${_pkgname}"*".pkg.tar."* \
    "${_server}"
}

_build_pkg() {
  local \
    _pkgname="${1}" \
    _mode="${2}"  \
    _server="${3}" \
    _pwd
  _pwd="$( \
    pwd)"
  echo \
    "building ${_pkgname}"
  if [ "${_mode}" = "src" ]; then
    _makepkg \
      "${_pkgname}"
  elif [ "${_mode}" = "fakepkg" ]; then
    cd \
      "${_server}" || \
    exit
    fakepkg \
      "${_pkgname}"
  fi
  cd \
    "${_server}" || \
    exit
  repo-add \
    "${_profile}.db.tar.gz" \
    "${_pkgname}"*".pkg.tar."*
  cd \
    "${_pwd}" || \
    exit
}

_build_repo() {
  local \
    _mode="${1}" \
    _packages="${2}" \
    _server="${3}" \
    _profile \
    _pwd
  _pwd=$( \
    pwd)
  _profile=$( \
    basename \
      "$(pwd)")
  # shellcheck source=./packages.extra
  # shellcheck disable=SC1091
  source \
    "${_pwd}/${_packages}"
  [[ "${_server}" == "" ]] && \
    _server="/tmp/ur/${_profile}"
  rm \
    -rf \
      repo \
      "${_server}"
  mkdir \
    -p \
      repo \
      "${_server}"
  chown \
    "$( \
      id \
        -u):$( \
	  id \
	    -g)" \
    "${_server}"
  chmod \
    700 \
    "${_server}" 
  cd \
    repo || \
    exit
  # shellcheck disable=SC2154
  echo \
    "building ${_packages[*]}"
  for _pkg \
    in "${_packages[@]}"; do
    _build_pkg \
      "${_pkg}" \
      "${_mode}" \
      "${_server}"
  done
  cd \
    ..
  rm \
    -rf \
      repo
}

_fur_get_opts(){
  local \
    _fur_opts=()
  _get_cmd="fur"
  _fur_opts=(
    -d
    -w
      "${_pub_repo}"
  )
  _get_opts=(
    "${_fur_opts[@]}"
  )
}

_lur_get_opts() {
  local \
    _lur_opts=()
  _get_cmd="lur"
  _lur_opts=(
    -d
    -o
      "${_dir}"
    -n
  )
  _get_opts+=(
    "${_lur_opts[@]}"
  )
}

_ur_get_opts(){
  local \
    _aspe_opts=()
  _get_cmd="aspe"
  _aspe_opts=(
    -p
      "etherscan"
  )
  _get_opts+=(
    "${_aspe_opts[@]}"
  )
}

_lur_get() {
  local \
    _dir="${1}" \
   _oldpwd
  _msg_info \
    "running lur ${_pkg}"
  _oldpwd="$( \
    pwd)"
  cd \
    "${_dir}"
  "_lur_get_opts"
  _msg_info \
     "Debug"
  if [[ "${quiet}" != "y" ]]; then
    _get_opts+=(
      -v
    )
  fi
  "${_get_cmd}" \
      "${_get_opts[@]}" \
      "${_pkg}" || \
  "${_get_cmd}" \
      "${_get_opts[@]}" \
      "${_pub}"
  _src_pkgs=(
    $( \
      find \
        . \
        -iname \
	  '*.pkg.*' \
	-exec \
	  echo \
	    ${_dir}/{} ';')
    )
  _msg_info \
    "found packages ${_pkgs[*]}"
  cd \
    "${_oldpwd}"
}

_fur_get() {
  local \
   _dir="${1}" \
   _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_dir}"
  "_fur_get_opts"
  if [[ "${quiet}" != "y" ]]; then
    _get_opts+=(
      -v
    )
  fi
  "${_get_cmd}" \
    "${_get_opts[@]}" \
    "${_pkg}" || \
  "${_get_cmd}" \
    "${_get_opts[@]}" \
    "${_pub}"
  _pkgs=(
    $( \
      find \
        . \
        -iname \
        '*.pkg.*' \
        -exec \
	  echo \
	    ${_dir}/{} ';')
  )
  _msg_info \
    "removing packages ${_pkgs[*]}"
  rm \
    -rf \
    "${_pkgs[@]}" || \
    true
  cd \
    "${_oldpwd}"
}

_fur_pub() {
  echo "hi"
}

# $@: packages
_pub() {
  local \
    _output_dir="${1}" \
    _repo="${2}" \
    _origin="${3}" \
    _pub="${4}" \
    _packages=() \
    _pkgs=() \
    _get_opts=() \
    _opts=() \
    _pkg \
    _pub_repo
  shift \
    4
  _packages=(
    "$@"
  )
  _msg_info \
    "publishing ${_packages[*]}"
  for _pkg \
    in "${_packages[@]}"; do
    _msg_info \
      "publishing ${_pkg}"
    _repo="$( \
      mktemp \
        -d)"
    _pub_repo="$( \
      mktemp \
        -d)"
#     _opts=(
#       "${_pub_opts[@]}"
#     )
    "_${_origin}_get" \
      "${_repo}" || \
      echo \
       "hi"
    "_${_pub}_get" \
      "${_pub_repo}" || \
      echo "hi"
    echo "found packages ${_src_pkgs[*]}"
    for _package \
      in "${_src_pkgs[@]}"; do
      "_${_pub}_pub" \
	"${_pub_repo}"
      _arch="$( \
        _get_arch \
	  "${_package}")"
      _package_dir="$( \
        _get_platform)/${_arch}"
      mkdir \
	-p \
	"${_pub_repo}/${_package_dir}"
      mv \
        "${_pkgs[@]}" \
        "${_package_dir}"
      git \
	add \
        "${_package_dir}"
      git \
	-a \
	-S \
	-m "publish"
    done
   #  _pkgs=(
   #    $(ls \
   #        *".pkg."*)
   #  )
   #  _msg_info \
   #    "installing ${_pkgs[*]}"
    # pacman \
    #   "${_pacman_opts[@]}" \
    #   "${_pkgs[@]}"
  done
  cd \
    "${OLDPWD}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "publishing" \
    "date" \
    "$(_get_date_human)"
   _set_override \
    "repo" \
    "dir" \
    "${HOME}"
   _set_override \
    "repo" \
    "origin" \
    "lur"
   _set_override \
    "pub" \
    "plat" \
    "fur"
   _set_override \
    "pub" \
    "dir" \
    "${HOME}"
   _set_override \
    "output" \
    "dir" \
    "$(pwd)"
if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -d                   Repo directory.
			  Default: $(_get "repo" "dir")
     -p                   Repo origin.
			  Default: $(_get "repo" "origin")
     -o                   Output directory.
			  Default: $(_get "output" "dir")
     -c                   Colors.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "          Publishing date:   $(_get "publishing" "date")"
  _msg_info "           Repo directory:   $(_get "repo" "dir")"
  _msg_info "              Repo origin:   $(_get "repo" "origin")"
  _msg_info "      Publishing platform:   $(_get "pub" "plat")"
  _msg_info "     Publishing directory:   $(_get "pub" "dir")"
  _msg_info "                 Packages:   $(_get "local" "packages")"
  _msg_info "         Output directory:   $(_get "output" "dir")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'd:o:p:cvh?' \
    arg; do
  case \
    "${arg}" in
    d) override_repo_dir="${OPTARG}" ;;
    o) override_repo_origin="${OPTARG}" ;;
    p) override_pub_platform="${OPTARG}" ;;
    w) override_pub_dir="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
local_packages=(
  $@
)
_config_user_init \
  "pub"
_set_overrides
_show_config
app_opts=(
  "${output_dir}"
  "${repo_dir}"
  "${repo_origin}"
  "${pub_plat}"
  "${local_packages[@]}"
)
_pub \
  "${app_opts[@]}"
