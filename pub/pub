#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'git'
}

# shellcheck disable=SC2034
_global_variables() {
  publishing_date=()
  local_packages=()
  repo_dir=""
  repo_origin=""
  pub_plat=""
  pub_dir=""
  pgp_key=""
  pgp_email=""
  output_dir=""
  color=""
  quiet=""
}

_get_arch() {
  local \
    _pkg="${1}" \
    _filename \
    _filename_array=() \
    _string \
    _arch
  _filename="$( \
    basename \
      "${_pkg}")"
  IFS="-" \
  read \
    -r \
    -a \
    _filename_array <<< \
    "${_filename}"
  _string="${_filename_array[-1]}"
  _arch="${_string%%.*}" 
  echo \
    "${_arch}"
}

_get_platform() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    echo \
      "termux"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    echo \
      "arch"
  fi
}

_fur_get_opts(){
  local \
    _fur_opts=()
  _get_cmd="fur"
  _fur_opts=(
    -d
    -w
      "${_pub_repo}"
  )
  _get_opts=(
    "${_fur_opts[@]}"
  )
}

_lur_get_opts() {
  local \
    _lur_opts=()
  _get_cmd="lur"
  _lur_opts=(
    # -d
    -o
      "${_dir}"
    -n
  )
  _get_opts+=(
    "${_lur_opts[@]}"
  )
}

_ur_get_opts(){
  local \
    _aspe_opts=()
  _get_cmd="aspe"
  _aspe_opts=(
    -p
      "etherscan"
  )
  _get_opts+=(
    "${_aspe_opts[@]}"
  )
}

_fur_get() {
  local \
   _dir="${1}" \
   _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_dir}"
  "_fur_get_opts"
  if [[ "${quiet}" != "y" ]]; then
    _get_opts+=(
      -v
    )
  fi
  if [[ "${color}" == "y" ]]; then
    _get_opts+=(
      -c
    )
  fi || \
    true
  _msg_info \
   "running fur with ${_get_opts[*]}"
  "${_get_cmd}" \
    "${_get_opts[@]}" \
    "${_pkg}" || \
  "${_get_cmd}" \
    "${_get_opts[@]}" \
    "${_pub}"
  _pkgs=(
    $( \
      find \
        . \
        -iname \
        '*.pkg.*' \
        -exec \
	  echo \
	    ${_dir}/{} ';')
  )
  _msg_info \
    "removing packages ${_pkgs[*]}"
  rm \
    -rf \
    "${_pkgs[@]}" || \
    true
  cd \
    "${_oldpwd}"
}

_lur_get() {
  local \
    _dir="${1}" \
   _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_dir}"
  "_lur_get_opts"
  if [[ "${quiet}" != "y" ]]; then
    _get_opts+=(
      -v
    )
  fi
  if [[ "${color}" == "y" ]]; then
    _get_opts+=(
      -c
    )
  fi || \
    true
  _msg_info \
   "running lur with ${_get_opts[*]}"
  "${_get_cmd}" \
      "${_get_opts[@]}" \
      "${_pkg}" || \
  "${_get_cmd}" \
      "${_get_opts[@]}" \
      "${_pub}"
  _src_pkgs=(
    $( \
      find \
        . \
        -iname \
	  '*.pkg.*' \
	-exec \
	  echo \
	    ${_dir}/{} ';')
    )
  _msg_info \
    "found packages ${_src_pkgs[*]}"
  cd \
    "${_oldpwd}"
}

_fur_sign() {
  local \
    _dir="${1}" \
    _key="${2}" \
    _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_dir}"
  gpg \
    --local-user \
      "${_key}" \
    --sign \
    --detach \
    *".pkg.tar.xz"
  cd \
    "${_oldpwd}"
}

_fur_pub() {
  local \
    _dir="${1}" \
    _pkg="${2}" \
    _key="${3}" \
    _packages=() \
    _package \
    _oldpwd
  shift \
    3
  _packages+=(
    "$@"
  )
  _oldpwd="$( \
    pwd)"
  _msg_info \
   "add tmc remote in repo '${_dir}/${_pub}'"
  git \
    -C \
      "${_dir}/${_pub}" \
    remote \
      add \
        tmc \
        "github:themartiancompany/${_pub}"
  git \
    -C \
      "${_dir}/${_pub}" \
    checkout \
      -b \
      "${_pkg}" || \
  git \
    -C \
      "${_dir}/${_pub}" \
    checkout \
      "${_pkg}"
  for _package \
    in "${_packages[@]}"; do
    _msg_info \
      "publishing package: ${_package}" 
    _arch="$( \
      _get_arch \
        "${_package}")"
    _package_dir="$( \
      _get_platform)/${_arch}"
    _msg=(
      "publishing origin ${_origin} directory ${_dir}"
      "in ${_pub} directory '${_dir}/${_package_dir}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_dir}/${_pub}/${_package_dir}"
    rsync \
      -v \
      "${_packages[@]}" \
      "${_dir}/${_pub}/${_package_dir}"
    "_${_pub}_sign" \
      "${_dir}/${_pub}/${_package_dir}" \
      "${_key}"
    _msg_info \
      "entering ${_pub_repo}/${_pub}"
    cd \
      "${_pub_repo}/${_pub}"
    git \
      add \
        .
    git \
      add \
        "${_package_dir}"
  done
  git \
    commit \
      -a \
      -S \
      -m \
        "publish"
  git \
    push \
      tmc
      # "${_pkg}"
  cd \
    "${_oldpwd}"
}

# $@: packages
_pub() {
  local \
    _output_dir="${1}" \
    _repo="${2}" \
    _origin="${3}" \
    _origin="${3}" \
    _pub="${4}" \
    _key="${5}" \
    _email="${6}" \
    _packages=() \
    _pkgs=() \
    _get_opts=() \
    _opts=() \
    _pkg \
    _pub_repo
  shift \
    6
  _packages=(
    "$@"
  )
  _msg_info \
    "Packages: ${_packages[*]}."
  for _pkg \
    in "${_packages[@]}"; do
    _msg_info \
      "Package '${_pkg}'."
    _repo="$( \
      mktemp \
        -d)"
    _pub_repo="$( \
      mktemp \
        -d)"
    "_${_origin}_get" \
      "${_repo}" || \
      echo \
       "no get function for ${_origin}"
    _get_opts=()
    "_${_pub}_get" \
      "${_pub_repo}" || \
      echo "hi"
    _msg_info \
       "publishing packages ${_src_pkgs[*]}"
    "_${_pub}_pub" \
      "${_pub_repo}" \
      "${_pkg}" \
      "${_key}" \
      "${_src_pkgs[@]}"
  done
  cd \
    "${OLDPWD}"
}

_detect_pgp_key() {
  local \
    _config
  _config="$( \
    git \
      config \
        --list | \
      grep \
        signingkey | \
        awk \
          -F \
	    "=" \
	  '{print $2}')"
  echo \
    "${_config}"
}

_detect_pgp_email() {
  local \
    _config
  _config="$( \
    git \
      config \
        --list | \
      grep \
        email | \
        awk \
          -F \
	    "=" \
	  '{print $2}')"
  echo \
    "${_config}"
}


# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "publishing" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "repo" \
    "dir" \
    "${HOME}"
  _set_override \
    "repo" \
    "origin" \
    "lur"
  _set_override \
    "pub" \
    "plat" \
    "fur"
  _set_override \
    "pub" \
    "dir" \
    "${HOME}"
  _set_override \
    "pgp" \
    "key" \
    "$(_detect_pgp_key)"
  _set_override \
    "pgp" \
    "email" \
    "$(_detect_pgp_email)"
  _set_override \
    "output" \
    "dir" \
    "$(pwd)"
if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -d                   Repo directory.
			  Default: $(_get "repo" "dir")
     -p                   Repo origin.
			  Default: $(_get "repo" "origin")
     -k                   OpenPG signature key.
			  Default: $(_get "pgp" "key")
     -e                   OpenPG signature email.
			  Default: $(_get "pgp" "email")
     -o                   Output directory.
			  Default: $(_get "output" "dir")
     -c                   Colors.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "          Publishing date:   $(_get "publishing" "date")"
  _msg_info "              Repo origin:   $(_get "repo" "origin")"
  _msg_info "           Repo directory:   $(_get "repo" "dir")"
  _msg_info "      Publishing platform:   $(_get "pub" "plat")"
  _msg_info "     Publishing directory:   $(_get "pub" "dir")"
  _msg_info "            Signature key:   $(_get "pgp" "key")"
  _msg_info "          Signature email:   $(_get "pgp" "email")"
  _msg_info "                 Packages:   $(_get "local" "packages")"
  _msg_info "         Output directory:   $(_get "output" "dir")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'd:s:p:k:e:w:o:cvh?' \
    arg; do
  case \
    "${arg}" in
    d) override_repo_dir="${OPTARG}" ;;
    s) override_repo_origin="${OPTARG}" ;;
    p) override_pub_platform="${OPTARG}" ;;
    k) override_pgp_key="${OPTARG}" ;;
    e) override_pgp_email="${OPTARG}" ;;
    w) override_pub_dir="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
local_packages=(
  $@
)
_config_user_init \
  "pub"
_set_overrides
_show_config
app_opts=(
  "${output_dir}"
  "${repo_dir}"
  "${repo_origin}"
  "${pub_plat}"
  "${pgp_key}"
  "${pgp_email}"
  "${local_packages[@]}"
)
_pub \
  "${app_opts[@]}"
