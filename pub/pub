#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"
source \
  "${_lib}/libevm/libevm"

# Check all required programs
# are available
_requirements() {
  local \
    _zlib
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'git'
  _check_cmd \
    'evm-gpg' \
    'evm-gnupg'
  _check_cmd \
    'find' \
    'findutils'
  _check_cmd \
    'gpg-key-info'
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'rsync'
  _check_cmd \
    'tar'
  _zlib="$( \
    find \
      "$(_get_lib)/libz."* \
      -type \
        "f" \
        2>/dev/null || \
    true)"
  if [[ "${_zlib}" == "" ]]; then
    _msg_error \
      "No Zlib library detected." \
      1
  fi
  _check_cmd \
    'ur'
}

# shellcheck disable=SC2034
_global_variables() {
  publishing_date=()
  local_packages=()
  package_type=""
  ur_address=""
  ur_version=""
  pp_address=""
  pp_version=""
  up_address=""
  up_version=""
  deployments_dir=""
  user_level=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  cache_dir=""
  gnupg_home=""
  repo_dir=""
  repo_origin=""
  publishing_platform=""
  target_publisher=""
  target_platform=""
  target_price=""
  measure_unit=""
  target_uri=""
  recipe_publish=""
  package_list=""
  target_arch=""
  pub_dir=""
  pgp_fingerprint=""
  pgp_email=""
  output_dir=""
  color=""
  quiet=""
}

_conf_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.config/${app_name}"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/${app_name}"
  echo \
    "${_dir}"
}

_get_arch() {
  local \
    _pkg="${1}" \
    _filename \
    _filename_array=() \
    _string \
    _arch
  _filename="$( \
    basename \
      "${_pkg}")"
  IFS="-" \
  read \
    -r \
    -a \
    _filename_array <<< \
    "${_filename}"
  _string="${_filename_array[-1]}"
  _arch="${_string%%.*}" 
  echo \
    "${_arch}"
}

_fur_get_opts(){
  local \
    _platform="${1}" \
    _fur_opts=()
  _get_cmd="fur"
  _fur_opts=(
    -d
    # -P
    #   "${_platform}"
    -w
      "${_pub_repo}"
  )
  _get_opts=(
    "${_fur_opts[@]}"
  )
}

_lur_get_opts() {
  local \
    _platform="${1}" \
    _lur_opts=()
  _get_cmd="lur"
  _lur_opts=(
    -d \
      "${_repo}/lur"
    -o
      "${_binary_packages_tmp_dir}"
    -n
  )
  _get_opts+=(
    "${_lur_opts[@]}"
  )
}

_fur_repo_clean() {
  local \
    _dir="${1}" \
    _find_opts=() \
    _msg=()
  _msg=(
    "looking for packages and signatures"
    "in '${_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  _find_opts+=(
    -type
      "f"
    -iwholename
      "*/${_platform}/*.pkg.*"
    -print0
  )
  _msg=(
    "running find with options"
    "'${_find_opts[@]}'"
  )
  _msg_info \
    "${_msg[*]}"
  mapfile \
    -d \
    $'\0' \
    _pkgs < \
    <(find \
        "${_dir}" \
	"${_find_opts[@]}" 2>/dev/null || \
      true)
  _msg_info \
    "removing packages and signatures '${_pkgs[*]}'"
  rm \
    -rf \
    "${_pkgs[@]}" || \
    true
}

_fur_get() {
  local \
   _dir="${1}" \
   _platform="${2}" \
   _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_dir}"
  "_fur_get_opts" \
    "${_platform}"
  if [[ "${quiet}" != "y" ]]; then
    _get_opts+=(
      -v
    )
  fi
  if [[ "${color}" == "y" ]]; then
    _get_opts+=(
      -c
    )
  fi || \
    true
  _msg_info \
    "running fur with ${_get_opts[*]}"
  "${_get_cmd}" \
    "${_get_opts[@]}" \
    "${_pkg}" || \
  "${_get_cmd}" \
    "${_get_opts[@]}" \
    "${_pub}"
  _fur_repo_clean \
    "${_pub_repo}"
  cd \
    "${_oldpwd}"
}

_lur_binary_package_get() {
  local \
    _dir="${1}" \
    _platform="${2}" \
   _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_dir}"
  "_lur_get_opts" \
    "${_platform}"
  if [[ "${quiet}" != "y" ]]; then
    _get_opts+=(
      -v
    )
  fi
  if [[ "${color}" == "y" ]]; then
    _get_opts+=(
      -c
    )
  fi || \
    true
  _msg_info \
   "running lur with ${_get_opts[*]}"
  "${_get_cmd}" \
      "${_get_opts[@]}" \
      "${_pkg}" || \
  "${_get_cmd}" \
      "${_get_opts[@]}" \
      "${_pub}"
  _binary_pkgs=( $( \
    find \
      "${_binary_packages_tmp_dir}" \
      -iname \
        '*.pkg.*' \
      -exec \
        echo \
          "{}" ';')
  )
  _msg_info \
    "found packages ${_binary_pkgs[*]}"
  cd \
    "${_oldpwd}"
}

_pkgs_find() {
  local \
    _dir="${1}" \
    _find_opts=() \
    _msg=()
  _msg=(
    "looking for packages"
    "in '${_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  _find_opts+=(
    -type
      "f"
    -name
      "*.pkg.*"
    -print0
  )
  _msg=(
    "running find with options"
    "'${_find_opts[@]}'"
  )
  _msg_info \
    "${_msg[*]}"
  mapfile \
    -d \
    $'\0' \
    _pkgs < \
    <(find \
        "${_dir}" \
	"${_find_opts[@]}" 2>/dev/null || \
      true)
}

_fur_sign() {
  local \
    _binary_repo_dir="${1}" \
    _fingerprint="${2}" \
    _detach="${3}" \
    _oldpwd \
    _pkgs=() \
    _pkg \
    _gpg_opts=() \
    _msg=()
  _oldpwd="$( \
    pwd)"
  _gpg_opts+=(
    --local-user
      "${_fingerprint}"
    --sign
  )
  if [[ "${_detach}" == "y" ]]; then
    _gpg_opts+=(
      --detach
    )
  fi
  cd \
    "${_binary_repo_dir}"
  if [[ "${quiet}" == "n" ]]; then
    tree \
      "$(pwd)"
  fi
  _pkgs_find \
    "${_binary_repo_dir}"
  for _pkg in "${_pkgs[@]}"; do
    _msg=(
      "signing package '${_pkg}'"
    )
    _msg_info \
      "${_msg[*]}"
    gpg \
      "${_gpg_opts[@]}" \
      "${_pkg}"
  done
  cd \
    "${_oldpwd}"
}

_ur_sign() {
  local \
    _source_repo="${1}" \
    _pkg="${2}" \
    _gnupg_home="${3}" \
    _key_fingerprint="${4}" \
    _gpg_opts=() \
    _msg=()
  _msg=(
    "Signing source recipe repo"
    "archive '${_source_repo}/${_pkg}.tar.xz'."
  )
  _msg_info \
    "${_msg[*]}"
  _gpg_opts+=(
    --homedir
      "${_gnupg_home}"
    --local-user
      "${_key_fingerprint}"
    --sign
    --output
      "${_source_repo}/${_pkg}.tar.xz.gpg"
  )
  if [[ "${quiet}" == "n" ]]; then
    _msg=(
      "Source recipe repo"
      "contents:"
    )
    _msg_info \
      "${_msg[*]}"
    tree \
      "${_source_repo}"
  fi
  gpg \
    "${_gpg_opts[@]}" \
    "${_source_repo}/${_pkg}.tar.xz"
}

_ur_compress() {
  local \
    _source_dir="${1}" \
    _pkg="${2}" \
    _msg=()
  _msg=(
    "Compressing source recipe"
    "repository for package"
    "'${_pkg}'."
  )
  _msg_info \
    "${_msg[*]}"
  XZ_OPT="-e9" \
  tar \
    'cfJ' \
    "${_source_dir}/${_pkg}.tar.xz" \
    "${_source_dir}/${_pkg}"
}

_ur_upload() {
  local \
    _source_dir="${1}" \
    _pkg="${2}" \
    _wallet_name="${3}" \
    _wallet_path="${4}" \
    _wallet_password="${5}" \
    _wallet_seed="${6}" \
    _target_network="${7}" \
    _api_key_path="${8}" \
    _evmfs_opts=() \
    _evmfs_uri_opts=() \
    _msg=()
  _msg=(
    "Uploading source recipe"
    "repository signed archive"
    "'${_source_dir}/${_pkg}.tar.xz.gpg'"
    "for package '${_pkg}' to the EVMFS."
  )
  _msg_info \
    "${_msg[*]}"
  if [[ ! -v "EVMFS_OPTS" ]]; then
    _evmfs_opts+=(
      -N
        "${_wallet_name}"
      -w
        "${_wallet_path}"
      -p
        "${_wallet_password}"
      -s
        "${_wallet_seed}"
      -n
        "${_target_network}"
      -k
        "${_api_key_path}"
    )
  else
    _evmfs_opts+=(
      $EVMFS_OPTS
    )
  fi
  _evmfs_uri_opts+=(
    "${_evmfs_opts[@]}"
    -m
      "simulate"
  )
  if [[ "${quiet}" == "n" ]]; then
    _evmfs_opts+=(
      -v
    )
  fi
  evmfs \
    "${_evmfs_opts[@]}" \
    publish \
      "${_source_dir}/${_pkg}.tar.xz.gpg"
  _msg=(
    "Getting uploaded source recipe"
    "repository signed archive"
    "'${_source_dir}/${_pkg}.tar.xz.gpg'"
    "EVMFS uri."
  )
  _msg_info \
    "${_msg[*]}"
  _target_uri="$( \
    evmfs \
      "${_evmfs_uri_opts[@]}" \
      publish \
        "${_source_dir}/${_pkg}.tar.xz.gpg")"
}

_contract_call_opts_setup() {
  _contract_call_opts+=(
    -n
      "${_target_network}"
    -N
      "${_wallet_name}"
    -k
      "${_api_key_path}"
    -A
      "${_abi}"
    -B
      "${_bytecode}"
    -C
      "${_compiler_output}"
  )
}

_publish_call_opts_setup() {
  local \
    _abi="${1}" \
    _bytecode="${2}" \
    _compiler_output="${3}" \
    _contract_call_opts=()
  _contract_call_opts_setup
  if [[ "${quiet}" == "n" ]]; then
    _publish_call_opts+=(
      -v
    )
  fi
  _publish_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "dynamic"
  )
}

_package_list_call_opts_setup() {
  local \
    _abi="${1}" \
    _bytecode="${2}" \
    _compiler_output="${3}" \
    _contract_call_opts=()
  _contract_call_opts_setup
  _unlisted_check_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "static"
  )
  _package_list_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "dynamic"
  )
}

_publisher_check_call_opts_setup() {
  local \
    _abi="${1}" \
    _bytecode="${2}" \
    _compiler_output="${3}" \
    _contract_call_opts=()
  _contract_call_opts_setup
  _publisher_check_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "static"
  )
}

_ether_to_wei() {
  local \
    _ether="${1}" \
    _unit
  _scale=1000000000000000000
  echo \
    "$((_ether * _scale))"
}

_ur_publisher_check() {
  local \
    _up_address="${1}" \
    _up_version="${2}" \
    _deployments_dir="${3}" \
    _target_network="${4}" \
    _target_publisher="${5}" \
    _listed \
    _up_abi \
    _up_bytecode \
    _up_compiler_output \
    _publisher_check_call_opts=() \
    _msg=()
  _msg=(
    "Checking if publisher '${_target_publisher}'"
    "is correctly registered on the User Repository."
  )
  _msg_info \
    "${_msg[*]}"
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "UserRepositoryPublishers" \
    "_up" \
    "${_up_version}"
  _publisher_check_call_opts_setup \
    "${_up_abi}" \
    "${_up_bytecode}" \
    "${_up_compiler_output}"
  _listed="$( \
    evm-contract-call \
      "${_publisher_check_call_opts[@]}" \
      "${_up_address}" \
      "listed" \
      "${_target_publisher}")"
  if [[ "${_listed}" == 0 ]]; then
    _msg=(
      "Publisher '${_target_publisher}'"
      "is not registered on the User Repository."
      "Register it by running 'ur-publishers"
      "register <target_publisher>'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif (( 0 < "${_listed}" )); then
    _msg=(
      "Publisher '${_target_publisher}'"
      "is correctly registered on the User Repository."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_ur_package_publisher_list() {
  local \
    _pp_address="${1}" \
    _ur_address="${2}" \
    _up_address="${3}" \
    _package="${4}" \
    _target_publisher="${5}" \
    _unlisted_check_call_opts=() \
    _package_list_call_opts=() \
    _msg=() \
    _pp_abi \
    _pp_bytecode \
    _pp_compiler_output \
    _listed
  _msg=(
    "Checking if publisher"
    "'${_target_publisher}' is already"
    "listed for package '${_package}'."
  )
  _msg_info \
    "${_msg[*]}"
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "PackagePublishers" \
    "_pp" \
    "${_ur_version}"
  _package_list_call_opts_setup \
    "${_pp_abi}" \
    "${_pp_bytecode}" \
    "${_pp_compiler_output}"
  _listed="$( \
    evm-contract-call \
      "${_unlisted_check_call_opts[@]}" \
      "${_pp_address}" \
      "packagePublisherListed" \
      "${_ur_address}" \
      "${_up_address}" \
      "${_package}" \
      "${_target_publisher}")"
  if [[ "${_listed}" == 0 ]]; then
    _msg=(
      "Publisher '${_target_publisher}' is not"
      "listed for package '${_package}',"
      "listing now."
    )
    _msg_info \
      "${_msg[*]}"
    _ur_publisher_check \
      "${_up_address}" \
      "${_ur_version}" \
      "${_deployments_dir}" \
      "${_target_network}" \
      "${_target_publisher}"
    evm-contract-call \
      "${_package_list_call_opts[@]}" \
      "${_pp_address}" \
      "listPackagePublisher" \
      "${_ur_address}" \
      "${_up_address}" \
      "${_package}" \
      "${_target_publisher}"
    _msg=(
      "Publisher '${_target_publisher}' has"
      "been correctly listed for"
      "package '${_package}'."
    )
    _msg_info \
      "${_msg[*]}"
  elif (( 0 < "${_listed}" )); then
    _msg=(
      "Package '${_package}' already listed"
      "for publisher '${_target_publisher}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_evmfs_uri_check() {
  local \
    _uri="${1}" \
    _msg=()
  if [[ "${_uri}" != "evmfs://"* ]]; then
    _msg=(
      "Signed package recipe archive"
      "URI must be an EVMFS uri."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_ur_pub() {
  local \
    _ur_address="${1}" \
    _ur_version="${2}" \
    _up_address="${3}" \
    _pp_address="${4}" \
    _deployments_dir="${5}" \
    _wallet_name="${6}" \
    _wallet_path="${7}" \
    _wallet_password="${8}" \
    _wallet_seed="${9}" \
    _target_network="${10}" \
    _api_key_path="${11}" \
    _target_publisher="${12}" \
    _target_price="${13}" \
    _measure_unit="${14}" \
    _target_uri="${15}" \
    _recipe_publish="${16}" \
    _package_list="${17}" \
    _work_dir="${18}" \
    _gnupg_home="${19}" \
    _key_fingerprint="${20}" \
    _package="${21}" \
    _msg=() \
    _ur_abi \
    _ur_bytecode \
    _ur_compiler_output \
    _publish_call_opts=()
  _msg=(
    "Publishing package '${_package}'"
    "on the Ur."
  )
  _msg_info \
    "${_msg[*]}"
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "UserRepository" \
    "_ur" \
    "${_ur_version}"
  if [[ "${_recipe_publish}" == "n" ]]; then
    _msg=(
      "Skipping recipe publishing."
    )
    _msg_info \
      "${_msg[*]}"
  elif [[ "${_recipe_publish}" == "y" ]]; then
    if [[ "${_target_uri}" == "" ]]; then
      _ur_compress \
        "${_work_dir}" \
        "${_package}"
      _ur_sign \
        "${_work_dir}" \
        "${_package}" \
        "${_gnupg_home}" \
        "${_key_fingerprint}"
      _ur_upload \
        "${_work_dir}" \
        "${_package}" \
        "${_wallet_name}" \
        "${_wallet_path}" \
        "${_wallet_password}" \
        "${_wallet_seed}" \
        "${_target_network}" \
        "${_api_key_path}"
    elif [[ "${_target_uri}" != "" ]]; then
      _msg=(
        "Signed recipe archive URI '${_target_uri}'"
        "specified through command line, skipping"
        "upload."
      )
      _msg_info \
        "${_msg[*]}"
      _evmfs_uri_check \
        "${_target_uri}"
    fi
    _publish_call_opts_setup \
      "${_ur_abi}" \
      "${_ur_bytecode}" \
      "${_ur_compiler_output}"
    _msg=(
      "Publishing package '${_package}'"
      "for publisher '${_target_publisher}'"
      "with URI '${_target_uri}' and"
      "price '${_target_price}'"
      "'${_measure_unit}' on the Ur."
    )
    _msg_info \
      "${_msg[*]}"
    if [[ "${_measure_unit}" == "ether" ]]; then
      _target_price="$( \
        _ether_to_wei \
          "${_target_price}")"
    fi
    evm-contract-call \
      "${_publish_call_opts[@]}" \
      "${_ur_address}" \
      "publishRecipe" \
      "${_package}" \
      "${_target_publisher}" \
      "${_target_price}" \
      "${_target_uri}"
    _msg=(
      "Package '${_package}' correctly published."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  if [[ "${_package_list}" == "y" ]]; then
    _ur_package_publisher_list \
      "${_pp_address}" \
      "${_ur_address}" \
      "${_up_address}" \
      "${_package}" \
      "${_target_publisher}"
  fi
}

_fur_pub() {
  local \
    _dir="${1}" \
    _pkg="${2}" \
    _publisher="${3}" \
    _fingerprint="${4}" \
    _platform="${5}" \
    _packages=() \
    _package \
    _oldpwd \
    _signature_detached \
    _msg=()
  shift \
    5
  _packages+=(
    "$@"
  )
  _msg=(
    "Publishing binary packages"
    "'${_binary_pkgs[*]}'."
  )
  _msg_info \
    "${_msg[*]}"
  _signature_detached="y"
  _oldpwd="$( \
    pwd)"
  _msg_info \
   "Add ${_publisher}"
   "remote in repo '${_dir}/${_pub}'"
  git \
    -C \
      "${_dir}/${_pub}" \
    remote \
      add \
        tmc \
        "github:${_publisher}/${_pub}"
  git \
    -C \
      "${_dir}/${_pub}" \
    remote \
      add \
        gl \
        "gitlab:${_publisher}/${_pub}"
  git \
    -C \
      "${_dir}/${_pub}" \
    checkout \
      -b \
      "${_pkg}" || \
  git \
    -C \
      "${_dir}/${_pub}" \
    checkout \
      "${_pkg}"
  for _package \
    in "${_packages[@]}"; do
    _msg_info \
      "publishing package: ${_package}" 
    _arch="$( \
      _get_arch \
        "${_package}")"
    _package_dir="${_platform}/${_arch}"
    _msg=(
      "publishing origin ${_origin} directory ${_dir}"
      "in ${_pub} directory '${_dir}/${_package_dir}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_dir}/${_pub}/${_package_dir}"
    rsync \
      -v \
      -a \
      "${_pkg[@]}" \
      "${_dir}/${_pub}/${_package_dir}"
  done
  _msg_info \
    "entering ${_dir}/${_pub}"
  cd \
    "${_dir}/${_pub}"
  "_${_pub}_sign" \
    "${_dir}/${_pub}/${_package_dir}" \
    "${_pgp_fingerprint}" \
    "${_signature_detached}"
  git \
    add \
      .
  git \
    commit \
      -a \
      -S \
      -m \
        "publish"
  git \
    push \
      tmc 
  git \
    push \
      gl || \
    true
  cd \
    "${_oldpwd}"
}

_pub_opts_setup() {
  if [[ "${_publishing_platform}" == "ur" ]]; then
    _pub_opts+=(
      "${_ur_address}"
      "${_ur_version}"
      "${_up_address}"
      "${_pp_address}"
      "${_deployments_dir}"
      "${_wallet_name}"
      "${_wallet_path}"
      "${_wallet_password}"
      "${_wallet_seed}"
      "${_target_network}"
      "${_api_key_path}"
      "${_target_publisher}"
      "${_target_price}"
      "${_measure_unit}"
      "${_target_uri}"
      "${_recipe_publish}"
      "${_package_list}"
      "${_source_tmp_dir}"
      "${_gnupg_home}"
      "${_key_fingerprint}"
      "${_pkg}"
    )
  elif [[ "${_publishing_platform}" == "fur" ]]; then
    _pub_opts+=(
      "${_pub_repo}" \
      "${_pkg}" \
      "${_publisher}" \
      "${_key}" \
      "${_platform}" \
      "${_binary_pkgs[@]}"
    )
  fi
}

_repo_dir_setup() {
  local \
    _msg=() \
    _tmp_dir
  _tmp_dir="${_cache_dir}/repo"
  _repo_dir="$( \
    mktemp \
      -d \
      -p \
        "${_tmp_dir}")"
  _msg=(
    "Setting up repository directory"
    "'${_repo_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_repo_dir}"
  chmod \
    700 \
    "${_repo_dir}"
}

_binary_packages_tmp_dir_setup() {
  local \
    _msg=() \
    _tmp_dir
  _tmp_dir="${_cache_dir}/binaries"
  _binary_packages_tmp_dir="$( \
    mktemp \
      -u \
      -d \
      -p \
        "${_tmp_dir}")"
  _msg=(
    "Setting up temporary"
    "binary packages directory"
    "'${_binary_packages_tmp_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_binary_packages_tmp_dir}"
  chmod \
    700 \
    "${_binary_packages_tmp_dir}"
}

_pub_repo_setup() {
  local \
    _msg=() \
    _tmp_dir
  _tmp_dir="${_cache_dir}/publish"
  _pub_repo="$( \
    mktemp \
      -u \
      -d \
      -p \
        "${_tmp_dir}")"
  _msg=(
    "Setting up temporary"
    "publication repository directory"
    "'${_pub_repo}'."
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_pub_repo}"
  chmod \
    700 \
    "${_pub_repo}"
}

_source_tmp_dir_setup() {
  local \
    _msg=() \
    _tmp_dir
  _tmp_dir="${_cache_dir}/source"
  _source_tmp_dir="$( \
    mktemp \
      -u \
      -d \
      -p \
        "${_tmp_dir}")"
  _msg=(
    "Setting up temporary"
    "source package directory"
    "'${_source_tmp_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_source_tmp_dir}"
  chmod \
    700 \
    "${_source_tmp_dir}"
}

_source_prepare() {
  local \
    _source_repo="${1}" \
    _pkg="${2}" \
    _source_dir="${3}"
  rsync \
    -a \
    "${_source_repo}/${_pkg}" \
    "${_source_dir}"
  if [[ -d "${_source_dir}/${_pkg}/.git" ]]; then
    _msg=(
      "Removing git repository data"
      "directory '${_source_dir}/${_pkg}/.git'."
    )
    _msg_info \
      "${_msg[*]}"
    rm \
      -rf \
      "${_source_dir}/${_pkg}/.git"
  fi
}

# $@: packages
_pub() {
  local \
    _package_type="${1}" \
    _ur_address="${2}" \
    _ur_version="${3}" \
    _up_address="${4}" \
    _pp_address="${5}" \
    _deployments_dir="${6}" \
    _wallet_name="${7}" \
    _wallet_path="${8}" \
    _wallet_password="${9}" \
    _wallet_seed="${10}" \
    _target_network="${11}" \
    _api_key_path="${12}" \
    _cache_dir="${13}" \
    _output_dir="${14}" \
    _repo_dir="${15}" \
    _origin="${16}" \
    _publishing_platform="${17}" \
    _target_publisher="${18}" \
    _target_price="${19}" \
    _measure_unit="${20}" \
    _target_uri="${21}" \
    _recipe_publish="${22}" \
    _package_list="${23}" \
    _gnupg_home="${24}" \
    _key_fingerprint="${25}" \
    _key_email="${26}" \
    _platform="${27}" \
    _packages=() \
    _pkgs=() \
    _get_opts=() \
    _pub_opts=() \
    _binary_pkgs=() \
    _pkg \
    _pub_repo \
    _binary_packages_tmp_dir \
    _source_tmp_dir \
    _msg=()
  shift \
    27
  _packages=(
    "$@"
  )
  if [[ "${_package_type}" == "source" && \
        "${_publishing_platform}" == "fur" ]]; then
    _msg=(
      "The fur is a binary package publishing"
      "platform."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_repo_dir}" == "" ]]; then
    _repo_dir_setup
  fi
  _msg_info \
    "Packages: ${_packages[*]}."
  for _pkg \
    in "${_packages[@]}"; do
    _msg_info \
      "Package '${_pkg}'."
    _pub_repo_setup
    if [[ "${_package_type}" == "binary" ]]; then
      _binary_packages_tmp_dir_setup
      _binary_packages_tmp_dir="$( \
        mktemp \
          -d)"
      "_${_origin}_binary_package_get" \
        "${_repo_dir}" \
        "${_platform}" || \
        echo \
         "no get function for ${_origin}"
      _get_opts=()
      "_${_publishing_platform}_get" \
        "${_pub_repo}" \
        "${_platform}" || \
        echo "hi"
    elif [[ "${_package_type}" == "source" ]]; then
      if [[ "${_origin}" == "lur" ]]; then
        if [[ ! -d "${_repo_dir}/lur/${_pkg}" ]]; then
          _msg=(
            "found no sources for package"
            "'${_pkg}' in repo '${_repo_dir}/lur'"
          )
          _msg_error \
            "${_msg[*]}" \
            1
	else
          _source_tmp_dir_setup
	  _source_prepare \
	    "${_repo_dir}/lur" \
	    "${_pkg}" \
	    "${_source_tmp_dir}"
        fi
      fi
    fi
    _pub_opts_setup
    "_${_publishing_platform}_pub" \
      "${_pub_opts[@]}"
  done
  cd \
    "${OLDPWD}"
}

_key_latest_select() {
  local \
    _keyserver_receive_dir \
    _find_opts=() \
    _keys=() \
    _keys_sorted=() \
    _msg=()
  _keyserver_receive_dir="${HOME}/.cache/evm-openpgp-keyserver/receive"
  _msg=(
    "Selecting latest published"
    "publisher's wallet address key"
    "retrieved from keyserver."
  )
  _msg_info \
    "${_msg[*]}"
  _msg=(
    "looking for own signatures"
    "in '${_keyserver_receive_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  _find_opts+=(
    -type
      "f"
    -iname
      "${wallet_address}.*.asc"
    -print0
  )
  _msg=(
    "running find with options"
    "'${_find_opts[@]}'"
  )
  _msg_info \
    "${_msg[*]}"
  mapfile \
    -d \
    $'\0' \
    _keys < \
    <(find \
        "${_keyserver_receive_dir}" \
	"${_find_opts[@]}" 2>/dev/null || \
      true)
  _keys_sorted=( $( \
    printf \
      "%s\n" \
      "${_keys[@]}" | \
      sort \
        -V)
  )
  _msg_info \
    "selecting key '${_keys_sorted[-1]}'"
  _fingerprint="$( \
    gpg-key-info \
      -o \
        "fingerprint" \
      "${_keys_sorted[-1]}")"
}

_key_git_select() {
  local \
    _msg=()
  _msg=(
    "using default git signing key"
  )
  _msg_info \
    "${_msg[*]}"
  _fingerprint="$( \
    git \
      config \
        --list | \
      grep \
        signingkey | \
        awk \
          -F \
            "=" \
          '{print $2}')"
}

_pgp_fingerprint_auto_detect() {
  local \
    _fingerprint
  if [[ "${publishing_platform}" == "fur" ]]; then
    _key_git_select
  elif [[ "${publishing_platform}" == "ur" ]]; then
    _key_latest_select
  fi
  _set_override \
    "pgp" \
    "fingerprint" \
    "${_fingerprint}"
}

_pgp_email_auto_detect() {
  local \
    _email
  if [[ "${publishing_platform}" == "ur" ]]; then
    _email=""
  elif [[ "${publishing_platform}" == "fur" ]]; then
    _email="$( \
      git \
        config \
          --list | \
        grep \
          email | \
          awk \
            -F \
              "=" \
            '{print $2}')"
  fi
  _set_override \
    "pgp" \
    "email" \
    "${_email}"
}

_platform_auto_detect() {
  local \
    _platform="arch" \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]] || \
     [[ -v "TERMUX_VERSION" ]]; then
    _platform="termux"
  fi
  echo \
    "${_platform}"
}

_package_type_auto_detect() {
  local \
    _type
  if [[ "${publishing_platform}" == "fur" ]]; then
    _type="binary"
  elif [[ "${publishing_platform}" == "ur" || \
          "${publishing_platform}" == "gur"  ]]; then
    _type="source"
  fi
  _set_override \
    "package" \
    "type" \
    "${_type}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  local \
    _msg=()
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "publishing" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "publishing" \
    "platform" \
    "ur"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "ur" \
    "${user_level}"
  _network_auto_detect \
    "UserRepository" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "evm-wallet" \
         "${wallet_name}")"
  _secret_auto_detect \
    "seed" \
    "seed" \
    "evm-wallet" \
    "${wallet_name}"
  _secret_auto_detect \
    "password" \
    "plain" \
    "evm-wallet" \
    "${wallet_name}"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
	   "${wallet_name}" \
           "address")"
  _set_override \
    "target" \
    "publisher" \
    "${wallet_address}"
  _set_override \
    "target" \
    "price" \
    "0"
  _set_override \
    "measure" \
    "unit" \
    "ether"
  _set_override \
    "target" \
    "uri" \
    ""
  _set_override \
    "recipe" \
    "publish" \
    "y"
  _set_override \
    "package" \
    "list" \
    "y"
  _contract_setup_auto_detect \
    "ur" \
    "UserRepository" \
    "ur" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
  _contract_setup_auto_detect \
    "ur" \
    "PackagePublishers" \
    "pp" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
  _contract_setup_auto_detect \
    "ur" \
    "UserRepositoryPublishers" \
    "up" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
  _set_override \
    "repo" \
    "dir" \
    "${HOME}"
  _set_override \
    "repo" \
    "origin" \
    "lur"
  _package_type_auto_detect
  _set_override \
    "pub" \
    "dir" \
    "${HOME}"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _set_override \
    "gnupg" \
    "home" \
    "${HOME}/.config/evm-gnupg"
  _pgp_email_auto_detect
  _pgp_fingerprint_auto_detect
  _set_override \
    "output" \
    "dir" \
    "$(pwd)"
  _set_override \
    "target" \
    "platform" \
    "$(_platform_auto_detect)"
  if [[ "${local_packages[*]}" == "" ]]; then
    local_packages+=(
      "$(basename \
        "$(realpath \
          "$(pwd)")")"
    )
    _msg=(
      "No input package given,"
      "publishing ${local_packages[*]}"
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _ur \
    _ur_deployment \
    _networks \
    _usage_text
  _ur="UserRepository"
  _ur_deployment="$( \
    _get \
      "deployments" \
      "dir")/${_ur}"
  _networks="$( \
    evm-contract-deployment-networks \
      -A \
      "${_ur_deployment}")"
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Build recipes and binary packages publisher tool.

Usage:
  $(_get "app" "name")
    [options]
    [packages]

  networks:
$(_display_networks \
     "${_networks[*]}")

  options:
     -A <ur_address>           Address of the 'User Repository'
                               contract on the network.
                               Default: ${ur_address}
     -B <up_address>           Address of the 'User Repository
                               Publishers' contract on the
                               network.
                               Default: ${up_address}
     -C <pp_address>           Address of the 'Package Publishers'
                               contract on the network.
                               Default: ${pp_address}
     -V <ur_version>           Version of the target 'User Repository
                               Publishers' contract.
                               Default: ${ur_version}
     -u                        Whether to retrieve publishers' contract
                               address from user directory or custom
                               deployment.
                               Default: ${user_level}
     -d <deployments_dir>      Contracts deployments directory.
                               Default: ${deployments_dir}
     -N <wallet_name>          Wallet name.
                               Default: ${wallet_name}
     -w <wallet_path>          Wallet path.
                               Default: ${wallet_path}
     -p <wallet_password>      Wallet password.
                               Default: ${wallet_password}
     -s <wallet_seed>          Wallet seed path.
                               Default: ${wallet_seed}
     -n <network>              EVM network name (${_networks[*]}).
                               Default: ${target_network}
     -k <api_key>              Etherscan-like service key.
                               Default: ${api_key}
     -W <repo_dir>             Repo directory.
                               Default: ${repo_dir}
     -S <origin>               Repo origin.
                               Default: ${repo_origin}
     -D <publishing_platform>  Publishing platform.
                               It can be 'ur', 'gur', 'fur'.
                               Default: ${publishing_platform}
     -P <target_publisher>     Target publisher.
                               It's 'themartiancompany' for
                               gur' and 'fur' and user's
                               wallet address for 'ur'.
                               Default: ${target_publisher}
     -M <target_price>         Target price for the package.
                               Default: ${target_price}
     -m <measure_unit>         Measure unit for the network
                               currency. It can be 'ether'
                               and 'wei'.
                               Default: ${measure_unit}
     -U <target_uri>           To manually specify the signed
                               package recipe archive evmfs URI
                               and skip upload.
                               Default: ${target_uri}
     -R <y/n>                  If set to 'y', it will skip
                               recipe publishing.
                               Default: ${recipe_publish}
     -L <y/n>                  Whether to list package
                               for user search. Requires to
			       be a registered Ur publisher.
                               Default: ${package_list}
     -H <gnupg_home>           GNUPG home directory.
                               Default: ${gnupg_home}
     -K <fingerprint>          OpenPG signature key.
                               Default: ${pgp_fingerprint}
     -E <email_like_id>        OpenPG signature email.
                               Default: ${pgp_email}
     -O <computing_platform>   Life or DogeOS base platform for
                               which the binary package is built
                               ('arch', 'termux').
                               Default: ${target_platform}
     -o <output_dir>           Output directory.
                               Default: ${output_dir}

     -c                        Colors.
     -h                        This message.
     -v                        Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "            Publishing date:   ${publishing_date}"
  _msg_info "               Package type:   ${package_type}"
  _msg_info "                Repo origin:   ${repo_origin}"
  _msg_info "             Repo directory:   ${repo_dir}"
  _msg_info "        Publishing platform:   ${publishing_platform}"
  _msg_info "    User Repository address:   ${ur_address}"
  _msg_info "    User Repository version:   ${ur_version}"
  _msg_info "      Ur Publishers address:   ${up_address}"
  _msg_info " Package Publishers address:   ${pp_address}"
  _msg_info "                 User level:   ${user_level}"
  _msg_info "      Deployments directory:   ${deployments_dir}"
  _msg_info "             Wallet address:   ${wallet_address}"
  _msg_info "                Wallet name:   ${wallet_name}"
  _msg_info "                Wallet path:   ${wallet_path}"
  _msg_info "            Wallet password:   ${wallet_password}"
  _msg_info "                Wallet seed:   ${wallet_seed}"
  _msg_info "             Target network:   ${target_network}"
  _msg_info "                    API key:   ${api_key}"
  _msg_info "            Cache directory:   ${cache_dir}"
  _msg_info "       Publishing directory:   ${pub_dir}"
  _msg_info "           Target publisher:   ${target_publisher}"
  _msg_info "            GNUPG directory:   ${gnupg_home}"
  _msg_info "            Target platform:   ${target_platform}"
  _msg_info "              Signature key:   ${pgp_fingerprint}"
  _msg_info "            Signature email:   ${pgp_email}"
  _msg_info "               Target price:   ${target_price}"
  _msg_info "               Measure unit:   ${measure_unit}"
  _msg_info "          Target recipe URI:   ${target_uri}"
  _msg_info "             Recipe publish:   ${recipe_publish}"
  _msg_info "               List package:   ${package_list}"
  _msg_info "                   Packages:   ${local_packages[*]}"
  _msg_info "           Output directory:   ${output_dir}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:A:V:ud:N:w:p:s:n:k:C:S:D:P:M:m:U:R:L:H:K:E:W:o:O:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_package_type="${OPTARG}" ;;
    A) override_ur_address="${OPTARG}" ;;
    V) override_ur_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    C) override_repo_dir="${OPTARG}" ;;
    S) override_repo_origin="${OPTARG}" ;;
    D) override_publishing_platform="${OPTARG}" ;;
    P) override_target_publisher="${OPTARG}" ;;
    M) override_target_price="${OPTARG}" ;;
    m) override_measure_unit="${OPTARG}" ;;
    U) override_target_uri="${OPTARG}" ;;
    R) override_recipe_publish="${OPTARG}" ;;
    L) override_package_list="${OPTARG}" ;;
    H) override_gnupg_home="${OPTARG}" ;;
    K) override_pgp_fingerprint="${OPTARG}" ;;
    E) override_pgp_email="${OPTARG}" ;;
    W) override_pub_dir="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    O) override_target_platform="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
local_packages=(
  $@
)
_config_user_init \
  "${app_name}"
_set_overrides
_show_config
app_opts=(
  "${package_type}"
  "${ur_address}"
  "${ur_version}"
  "${up_address}"
  "${pp_address}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${cache_dir}"
  "${output_dir}"
  "${repo_dir}"
  "${repo_origin}"
  "${publishing_platform}"
  "${target_publisher}"
  "${target_price}"
  "${measure_unit}"
  "${target_uri}"
  "${recipe_publish}"
  "${package_list}"
  "${gnupg_home}"
  "${pgp_fingerprint}"
  "${pgp_email}"
  "${target_platform}"
  "${local_packages[@]}"
)
_pub \
  "${app_opts[@]}"
